"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _utils = require("../utils");

var _reactThemeable = require("react-themeable");

var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Input component. Takes a label prop and wraps label and input in a div. Takes regular input attributes as props as well
 */

var Input = function (_Component) {
  _inherits(Input, _Component);

  function Input(props) {
    _classCallCheck(this, Input);

    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

    _this.state = { "value": "" };
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(Input, [{
    key: "handleChange",
    value: function handleChange(event) {
      /* Check if max length has been set. If max length has been
      set make sure the user input is less than max Length. */
      if (this.props.maxLength) {
        if (event.target.value.length > this.props.maxLength) {
          this.setState({
            "value": event.target.value.substring(0, this.props.maxLength)
          });
          return;
        }
      }
      this.setState({ "value": event.target.value });
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          disabled = _props.disabled,
          label = _props.label,
          multiline = _props.multiline,
          type = _props.type,
          value = _props.value,
          others = _objectWithoutProperties(_props, ["disabled", "label", "multiline", "type", "value"]);

      var theme = (0, _reactThemeable2.default)(others.theme);

      var inputClassName = (0, _utils.classNames)(_defineProperty({
        "input": type !== "checkbox",
        "checkbox": type === "checkbox",
        disabled: disabled,
        multiline: multiline,
        value: value
      }, "" + this.props.className, !!this.props.className));

      return _react2.default.createElement(
        "div",
        theme(1, "container"),
        this.props.label ? _react2.default.createElement(
          "label",
          _extends({ htmlFor: this.props.htmlFor }, theme(2, "label")),
          label
        ) : null,
        _react2.default.createElement("input", _extends({
          value: this.state.value
        }, theme.apply(undefined, [3].concat(_toConsumableArray(inputClassName))), {
          onChange: this.handleChange,
          type: type
        }))
      );
    }
  }]);

  return Input;
}(_react.Component);

Input.defaultProps = {
  "disabled": false,
  "type": "text",
  "inputLength": 0,
  "focus": false,
  "theme": {
    "container": true
  }
};

exports.default = Input;