"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactThemeable = require("react-themeable");

var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * A CSS driven tooltip that gives more information when an element it wraps is hovered over.
 */
var Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));
  }

  _createClass(Tooltip, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          children = _props.children,
          position = _props.position,
          tooltip = _props.tooltip,
          inline = _props.inline,
          other = _objectWithoutProperties(_props, ["children", "position", "tooltip", "inline"]);

      var theme = (0, _reactThemeable2.default)(other.theme);
      var tooltipClasses = void 0;
      if (!children.props.disabled) {
        tooltipClasses = (0, _utils.classNames)({
          "tooltip": true,
          "tooltip-top": position !== "left" && position !== "bottom" && position !== "right",

          "tooltip-left": position === "left",
          "tooltip-bottom": position === "bottom",
          "tooltip-right": position === "right"
        });
      }
      tooltipClasses = tooltipClasses ? tooltipClasses : [];

      var element = inline ? "span" : "div";

      var props = {
        "data-tooltip": tooltip
      };

      Object.assign(props, theme.apply(undefined, [1, "block"].concat(_toConsumableArray(tooltipClasses))));

      return _react2.default.createElement(element, props, children);
    }
  }]);

  return Tooltip;
}(_react.Component);

Tooltip.defaultProps = {
  "className": "",
  "children": _react2.default.createElement(
    "p",
    null,
    "This is some text with tooltip"
  ),
  "tooltip": "Sample Tooltip Text",
  "theme": {
    "block": true
  }
};

exports.default = Tooltip;