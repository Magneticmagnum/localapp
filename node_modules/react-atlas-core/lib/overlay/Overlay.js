"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _utils = require("../utils");

var _reactThemeable = require("react-themeable");

var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Overlay component adds a 'shadowbox' to screen. Mostly used internally in the lib on the `<Dialog>` component.
 */
var Overlay = function (_Component) {
  _inherits(Overlay, _Component);

  function Overlay() {
    _classCallCheck(this, Overlay);

    return _possibleConstructorReturn(this, (Overlay.__proto__ || Object.getPrototypeOf(Overlay)).apply(this, arguments));
  }

  _createClass(Overlay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.overlay = document.createElement("div");
      this.overlay.setAttribute("data-react-atlas", "overlay");
      document.body.appendChild(this.overlay);
      this.handleRender();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.handleRender();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactDom2.default.unmountComponentAtNode(this.overlay);
      document.body.removeChild(this.overlay);
    }
  }, {
    key: "handleRender",
    value: function handleRender() {
      var _props = this.props,
          className = _props.className,
          active = _props.active,
          invisible = _props.invisible,
          children = _props.children,
          onClick = _props.onClick,
          other = _objectWithoutProperties(_props, ["className", "active", "invisible", "children", "onClick"]);

      var theme = (0, _reactThemeable2.default)(other.theme);
      var classes = (0, _utils.classNames)(_defineProperty({
        "inactive": !active,
        active: active,
        invisible: invisible
      }, "" + className, className));

      var overlayClasses = (0, _utils.classNames)({
        "overlayActive": active,
        "overlayInactive": !active
      });

      _reactDom2.default.render(_react2.default.createElement(
        "div",
        theme.apply(undefined, [1].concat(_toConsumableArray(classes))),
        _react2.default.createElement("div", _extends({}, theme.apply(undefined, [2].concat(_toConsumableArray(overlayClasses))), { onClick: onClick })),
        children
      ), this.overlay);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Overlay;
}(_react.Component);

Overlay.defaultProps = {
  "invisible": false,
  "theme": {
    "active": true
  }
};

exports.default = Overlay;