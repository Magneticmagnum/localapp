"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _utils = require("../utils");

var _DropdownTrigger = require("./DropdownTrigger");

var _DropdownTrigger2 = _interopRequireDefault(_DropdownTrigger);

var _DropdownContent = require("./DropdownContent");

var _DropdownContent2 = _interopRequireDefault(_DropdownContent);

var _reactDom = require("react-dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Dropdown inspired and mostly taken from:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               react-simple-dropdown
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               https://github.com/Fauntleroy/react-simple-dropdown
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Copyright (c) 2015, Timothy Kempf <tim@kemp59f.info>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

/**
 * Simple Composable Dropdown Component that wraps DropdownTrigger and DropdownContent components. Primarily useful for Navigational dropdowns, not form select dropdowns.
 */
var Dropdown = function (_Component) {
  _inherits(Dropdown, _Component);

  function Dropdown(props) {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

    _this._onWindowClick = function (event) {
      var dropdown_element = (0, _reactDom.findDOMNode)(_this);
      if (event.target !== dropdown_element && !dropdown_element.contains(event.target) && _this._isActive()) {
        _this._hide();
      }
    };

    _this._onToggleClick = function (event) {
      event.preventDefault();
      if (_this._isActive()) {
        _this._hide();
      } else {
        _this._show();
      }
    };

    _this._isActive = function () {
      return typeof _this.props.active === "boolean" ? _this.props.active : _this.state.active;
    };

    _this._hide = function () {
      _this.setState({
        "active": false
      });
      if (_this.props.onHide) {
        _this.props.onHide();
      }
    };

    _this._show = function () {
      _this.setState({
        "active": true
      });
      if (_this.props.onShow) {
        _this.props.onShow();
      }
    };

    _this.state = {
      "active": false
    };
    return _this;
  }

  _createClass(Dropdown, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("click", this._onWindowClick);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("click", this._onWindowClick);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          props = _objectWithoutProperties(_props, ["children", "className"]);
      // create component classes


      var active = this._isActive();

      // stick callback on trigger element
      var bound_children = _react2.default.Children.map(children, function (child) {
        if (child.type === _DropdownTrigger2.default) {
          child = (0, _react.cloneElement)(child, {
            "onClick": _this2._onToggleClick
          });
        } else if (child.type === _DropdownContent2.default) {
          child = (0, _react.cloneElement)(child, {
            active: active
          });
        }
        return child;
      });
      return _react2.default.createElement(
        "div",
        props,
        bound_children
      );
    }
  }]);

  return Dropdown;
}(_react.Component);

Dropdown.defaultProps = {
  "className": ""
};

exports.default = Dropdown;