"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactThemeable = require("react-themeable");

var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Avatar component creates a circular area where an image, letter or icon/glyphicon can be presented. Great for user profiles and lists.
 *
 * **NOTE**: children will always take precedence over props passed into component.
 */
var Avatar = function (_React$Component) {
  _inherits(Avatar, _React$Component);

  function Avatar(props) {
    _classCallCheck(this, Avatar);

    var _this = _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call(this, props));

    var image = void 0;

    if (typeof props.image === "undefined") {
      if (typeof props.defaultImage === "undefined") {
        image = null;
      } else {
        image = props.defaultImage;
      }
    } else {
      image = props.image;
    }

    _this.state = { "image": image };
    return _this;
  }

  _createClass(Avatar, [{
    key: "handleBadImage",
    value: function handleBadImage() {
      /* If the default Image is equal to the bad image URL or the default image is undefined
          set this.state.image as null so avatar will fallback on a different prop. */
      if (this.props.defaultImage === this.state.image || typeof this.props.defaultImage === "undefined") {
        this.setState({ "image": null });
        return;
      }

      this.setState({ "image": this.props.defaultImage });
    }
  }, {
    key: "render",
    value: function render() {
      var theme = (0, _reactThemeable2.default)(this.props.theme);
      var _props = this.props,
          children = _props.children,
          icon = _props.icon,
          title = _props.title;

      var kids = children;
      if (_react2.default.Children.count(children) === 1 && typeof children === "string") {
        kids = _react2.default.createElement(
          "span",
          theme(4, "letter"),
          children[0]
        );
      }

      var avatar = null;
      var image = this.state.image;

      if (typeof image === "string") {
        avatar = _react2.default.createElement("img", _extends({
          src: image,
          title: title,
          onError: this.handleBadImage.bind(this)
        }, theme(3, "image")));
      } else if (image) {
        avatar = image;
      } else if (icon) {
        avatar = icon;
      } else if (title) {
        avatar = _react2.default.createElement(
          "span",
          theme(2, "letter"),
          title[0]
        );
      }

      return _react2.default.createElement(
        "div",
        theme(1, "avatar"),
        kids,
        avatar
      );
    }
  }]);

  return Avatar;
}(_react2.default.Component);

exports.default = Avatar;


Avatar.defaultProps = {
  "className": "",
  "icon": "",
  "theme": {
    "letter": "ra_avatar__letter",
    "image": "ra_avatar__image",
    "avatar": "ra_avatar__avatar"
  }
};